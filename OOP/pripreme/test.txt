b default
b int
a def
b int
b copy
b def
b oper=
 a copy
a oper=
a uzima b 1
1
b copy
2
tona destruktora







PRVI ZADATAK - ispis?

struct A {
  private:
  int x = 0;
  int y = 5;

  public:
  A() { std::cout << "A def" << std::endl; }
  A(double a) { std::cout << "A double" << std::endl; }
  A(const A&) { std::cout << "A copy" << std::endl; }
  ~A() { std::cout << "A destruct" << std::endl; }
  A& operator=(const A&) {
    x = 3;
    y = 6;
    return *this;
  }
};

struct B {
  private:
  int k;
  A x{5.5};

  public:
  B(int a) : x{A{3}} { std::cout << "B int" << std::endl; }
  B() { std::cout << "B default" << std::endl; }
  B(const B&) = default;
  ~B() { std::cout << "B destruct" << std::endl; }
};

struct C {
  private:
  B trick;

  public:
  C() { std::cout << "C default" << std::endl; }
  ~C() { std::cout << "C destruct" << std::endl; }
  C(const C&) { std::cout << "C copy" << std::endl; }
};

void fun(const C& x) { std::cout << "Funkcija fun" << std::endl; }

int main(void) {
  B bar(5.5);
  fun(C{});
  return 0;
}

DRUGI ZADATAK - rijesi 

// napraviti genericku funkciju moj_meks(x,y,z)
// x,y - iteratori na proizvoljnu kolekciju
// z - kriterij za sortiranje
// od korisnika u mainu traziti unos vrijednosti foo
// funkcija transformira niz na nacin da sve vrijednosti manje od vrijednosti test zamijeni nulom
// u slucaju da nijedna vrijednost iz kolekcije nije zadovoljila uslov
// potrebno baciti iznimku tipa invalid_argument i ispisati "Sinisa"
